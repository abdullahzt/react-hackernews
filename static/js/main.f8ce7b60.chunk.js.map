{"version":3,"sources":["store/reducers/news.js","store/actionType.js","store/reducers/index.js","components/Nav/Nav.js","components/NewsItem/NewsItem.js","components/NewsList/NewsList.js","store/actions/news.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["news","state","action","type","rootReducer","combineReducers","Nav","className","NewsItem","title","showSkeleton","count","NewsList","this","props","fetchNews","map","n","length","arr","i","push","Component","connect","dispatch","fetch","then","res","resp","ok","status","json","data","errorMessage","message","handleResponse","hits","store","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"4TAWeA,MATf,WAAmC,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC9B,OAAQA,EAAOC,MACX,ICJkB,aDKd,OAAO,YAAID,EAAOF,MACtB,QACI,OAAOC,IEAJG,EAJKC,YAAgB,CAChCL,S,wBCSWM,EAVH,WAER,OACI,yBAAKC,UAAU,OACX,qD,yDCYGC,EAfE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAEvB,OACI,yBAAKH,UAAU,QACX,4BAAKE,GACHC,GACE,6BACI,kBAAC,IAAD,CAAUH,UAAU,WAAWI,MAAO,O,ICLpDC,E,kLAGEC,KAAKC,MAAMC,c,+BAKX,IAAMf,EAAOa,KAAKC,MAAMd,KAAKgB,KAAI,SAAAC,GAAC,OAC9B,kBAAC,EAAD,CAAUR,MAAOQ,EAAER,WAGvB,GAAoB,IAAhBT,EAAKkB,OAAc,CAEnB,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAIE,KAAM,kBAAC,EAAD,CAAUX,cAAY,EAACD,MAAO,MAG5C,OACI,6BACKU,GAKT,OACI,6BACKnB,O,GA3BEsB,aA2CRC,mBANf,SAAyBtB,GACrB,MAAO,CACHD,KAAMC,EAAMD,QAIoB,CAAEe,UCxCnC,WACH,OAAO,SAAAS,GACH,OAAOC,MAAM,wDACRC,MAAK,SAAAC,GAAG,OAKrB,SAAwBC,GACpB,IAAKA,EAAKC,GAAI,CACV,GAAID,EAAKE,QAAU,KAAOF,EAAKE,OAAS,IACpC,OAAOF,EAAKG,OAAOL,MAAK,SAAAM,GAEpB,KADU,CAAEC,aAAcD,EAAKE,YAKnC,KADU,CAAED,aAAc,oDAIlC,OAAOL,EAAKG,OAjBSI,CAAeR,MAC3BD,MAAK,SAAAC,GAAG,OAAIH,EAVd,CACHrB,KLJkB,aKKlBH,KAQmC2B,EAAIS,aDoChCb,CAAwCX,GEvCjDyB,ECLYC,YAAYlC,EACtBmC,YACIC,YAAgBC,KAChBC,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAAAC,GAAC,OAAIA,KDe1DC,MAXf,WACE,OACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,yBAAK9B,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SELcuC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,c","file":"static/js/main.f8ce7b60.chunk.js","sourcesContent":["import { FETCH_NEWS } from '../actionType';\n\nfunction news(state = [], action) {\n    switch (action.type) {\n        case FETCH_NEWS:\n            return [...action.news]\n        default:\n            return state\n    }\n}\n\nexport default news;","export const FETCH_NEWS = \"FETCH_NEWS\";","import { combineReducers } from 'redux';\nimport news from './news';\n\nconst rootReducer = combineReducers({\n    news\n})\n\nexport default rootReducer;","import React from 'react';\nimport './Nav.css';\n\nconst Nav = () => {\n\n    return (\n        <div className=\"nav\">\n            <h1>React - Hacker News</h1>\n        </div>\n    )\n\n}\n\nexport default Nav;","import React from 'react';\nimport './NewsItem.css'\nimport Skeleton from 'react-loading-skeleton';\n\nconst NewsItem = ({ title, showSkeleton }) => {\n\n    return (\n        <div className=\"item\" >\n            <h1>{title}</h1>\n            { showSkeleton && (\n                <div>\n                    <Skeleton className=\"skeleton\" count={3} />\n                </div>\n            ) }\n        </div>\n    )\n\n}\n\nexport default NewsItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport NewsItem from '../NewsItem/NewsItem';\n\nimport { fetchNews } from '../../store/actions/news';\n\nclass NewsList extends Component {\n\n    componentDidMount() {\n        this.props.fetchNews();\n    }\n\n    render() {\n\n        const news = this.props.news.map(n => (\n            <NewsItem title={n.title} />\n        ))\n\n        if (news.length === 0) {\n            let arr = []\n            for(let i = 0; i < 6; i++) {\n                arr.push((<NewsItem showSkeleton title={\"\"} />))\n            }\n\n            return (\n                <div>\n                    {arr}\n                </div>\n            )\n        } else {\n            \n            return (\n                <div>\n                    {news}    \n                </div>\n            )\n\n        }\n\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        news: state.news\n    }\n}\n\nexport default connect(mapStateToProps, { fetchNews })(NewsList);","import { FETCH_NEWS } from '../actionType';\n\nexport function loadNews(news) {\n    return {\n        type: FETCH_NEWS,\n        news\n    }\n}\n\nexport function fetchNews() {\n    return dispatch => {\n        return fetch(\"https://hn.algolia.com/api/v1/search?tags=front_page\")\n            .then(res => handleResponse(res))\n            .then(res => dispatch(loadNews(res.hits)))\n    }\n}\n\nfunction handleResponse(resp) {\n    if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n            return resp.json().then(data => {\n                let err = { errorMessage: data.message };\n                throw err;\n            })\n        } else {\n            let err = { errorMessage: \"Please try again later. Servor is not responding\" };\n            throw err;\n        }\n    }\n    return resp.json()\n}","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store';\n\nimport './App.css';\n\nimport Nav from './components/Nav/Nav';\nimport NewsList from './components/NewsList/NewsList';\n\nconst store = configureStore()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n      <Nav/>\n      <NewsList/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import rootReducer from './reducers';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nexport function configureStore() {\n    const store = createStore(rootReducer,\n        compose(\n            applyMiddleware(thunk),\n            window.devToolsExtension ? window.devToolsExtension() : f => f\n        )\n    )\n\n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}